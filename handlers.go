package main

import (
	"errors"

	tele "gopkg.in/tucnak/telebot.v3"
)

func provideUserToContext(next tele.HandlerFunc) tele.HandlerFunc {
	return func(tlg tele.Context) error {
		user, err := LoadUser(tlg.Sender().ID)
		if err != nil {
			return tlg.Send(err.Error())
		}

		tlg.Set("user", user)
		return next(tlg)
	}
}

func provideCompanyToContext(next tele.HandlerFunc) tele.HandlerFunc {
	return func(tlg tele.Context) error {
		user, ok := tlg.Get("user").(*User)
		if !ok {
			err := errors.New("–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ")
			log.Warn(err)
			return tlg.Send(err.Error())
		}
		company, err := LoadCompany(user.CompanyId)
		if err != nil {
			return tlg.Send(err.Error())
		}

		permissions := company.Permissions(user)
		tlg.Set("company", company)
		tlg.Set("permissions", permissions)

		switch permissions {
		case "admin":
			tlg.Set("menu", adminMenu)
			return next(tlg)
		case "employee":
			tlg.Set("menu", emplMenu)
			return next(tlg)
		default:
			return tlg.Send("–ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –∫–æ–º–ø–∞–Ω–∏–π, –∫ –∫–æ—Ç–æ—Ä—ã–º —É —Ç–µ–±—è –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø", startMenu)
		}
	}
}

func ensureIsAdmin(next tele.HandlerFunc) tele.HandlerFunc {
	return func(tlg tele.Context) error {
		permissions, ok := tlg.Get("permissions").(string)
		if !ok {
			err := errors.New("–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–∞–≤–∞—Ö –¥–æ—Å—Ç—É–ø–∞")
			log.Warn(err)
			return tlg.Send(err.Error())
		}

		if permissions == "admin" {
			return next(tlg)
		} else {
			return tlg.Send("–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∫–æ–º–ø–∞–Ω–∏–∏", emplMenu)
		}
	}
}

func SignOut() tele.HandlerFunc {
	return func(tlg tele.Context) error {
		if err := RemoveUser(tlg.Sender().ID); err != nil {
			log.Warn(err)
			return tlg.Send(err.Error())
		}

		user, ok := tlg.Get("user").(*User)
		if !ok {
			err := errors.New("–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ")
			log.Warn(err)
			return tlg.Send(err.Error())
		}
		if user.Admin {
			if err := RemoveCompany(user.CompanyId); err != nil {
				log.Warn(err)
				return tlg.Send(err.Error())
			}
			return tlg.Send("‚úÖ –£–¥–∞–ª–∏–ª –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–≤—è–∑–∞–Ω–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏")
		}

		return tlg.Send("üëã –£–¥–∞–ª–∏–ª –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ, –Ω–æ –≤—Å–µ–≥–¥–∞ –º–æ–∂–Ω–æ –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞", startMenu)
	}
}

func SendInvoiceMenu(tlg *tele.Context) error {
	return (*tlg).Send("–ö–∞–∫–æ–π –Ω—É–∂–µ–Ω —Å—á—ë—Ç?", invoiceMenu)
}

func BuildReplyMenus() {
	startMenu = &tele.ReplyMarkup{ResizeKeyboard: true}
	unAuthMenu = &tele.ReplyMarkup{ResizeKeyboard: true}
	emplMenu = &tele.ReplyMarkup{ResizeKeyboard: true}
	adminMenu = &tele.ReplyMarkup{ResizeKeyboard: true}

	startMenu.Reply(
		startMenu.Row(startMenu.Contact("–î–∞—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")),
	)

	unAuthMenu.Reply(
		unAuthMenu.Row(unAuthMenu.Text("–Ø –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")),
		unAuthMenu.Row(unAuthMenu.Text("–†–∞–∑–ª–æ–≥–∏–Ω–∏—Ç—å—Å—è")),
	)

	emplMenu.Reply(
		emplMenu.Row(emplMenu.Text("–ë–∞–ª–∞–Ω—Å"), emplMenu.Text("–ü–æ–µ–∑–¥–∫–∏")),
		emplMenu.Row(emplMenu.Text("–†–∞–∑–ª–æ–≥–∏–Ω–∏—Ç—å—Å—è")),
	)

	adminMenu.Reply(
		adminMenu.Row(adminMenu.Text("–ë–∞–ª–∞–Ω—Å"), adminMenu.Text("–ü–æ–µ–∑–¥–∫–∏")),
		adminMenu.Row(adminMenu.Text("–ü–æ—Å–ª–µ–¥–Ω–∏–π —Å—á—ë—Ç"), adminMenu.Text("–ù–æ–≤—ã–π —Å—á—ë—Ç")),
		adminMenu.Row(adminMenu.Text("–†–∞–∑–ª–æ–≥–∏–Ω–∏—Ç—å—Å—è")),
	)

	invoiceMenu = &tele.ReplyMarkup{}
	btnNewInvoice3000 = invoiceMenu.Data("–ù–∞ 3 000 ‚ÇΩ", "btnNewInvoice3000")
	btnNewInvoice10000 = invoiceMenu.Data("–ù–∞ 10 000 ‚ÇΩ", "btnNewInvoice10000")
	btnNewInvoice30000 = invoiceMenu.Data("–ù–∞ 30 000 ‚ÇΩ", "btnNewInvoice30000")
	btnLastInvoice = invoiceMenu.Data("–ü–æ—Å–ª–µ–¥–Ω–∏–π", "btnLastInvoice")
	invoiceMenu.Inline(
		invoiceMenu.Row(btnNewInvoice3000, btnNewInvoice10000),
		invoiceMenu.Row(btnNewInvoice30000, btnLastInvoice),
	)
}

func ReadContext(tlg tele.Context) (*User, *Company, *tele.ReplyMarkup, error) {
	user, ok := tlg.Get("user").(*User)
	if !ok {
		err := errors.New("–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ")
		return nil, nil, nil, err
	}

	company, ok := tlg.Get("company").(*Company)
	if !ok {
		err := errors.New("–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–ø–∞–Ω–∏–∏")
		return nil, nil, nil, err
	}

	menu, ok := tlg.Get("menu").(*tele.ReplyMarkup)
	if !ok {
		err := errors.New("–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–µ–Ω—é")
		return nil, nil, nil, err
	}

	return user, company, menu, nil
}
