package main

import (
	"context"
	"errors"
	"os"
	"strconv"

	"cloud.google.com/go/firestore"
	"github.com/sirupsen/logrus"
	tele "gopkg.in/tucnak/telebot.v3"
)

var (
	log                                                                       = logrus.New()
	appConfig                                                                 AppConfig
	ctx                                                                       context.Context
	client                                                                    *firestore.Client
	startMenu, unAuthMenu, emplMenu, adminMenu, invoiceMenu                   *tele.ReplyMarkup
	btnNewInvoice3000, btnNewInvoice10000, btnNewInvoice30000, btnLastInvoice tele.Btn
)

func init() {
	if err := appConfig.LoadConfiguration(os.Getenv("DLMBLTLG")); err != nil {
		log.Fatal(err)
		return
	}
	switch appConfig.Environment {
	case "prod":
		log.SetLevel(logrus.WarnLevel)
	case "test":
		log.SetLevel(logrus.TraceLevel)
		log.SetReportCaller(true)
		log.Info("Using 'test' environment")
	default:
		log.Fatal("'environment' should be 'test' or 'prod', but now it is ", appConfig.Environment)
		return
	}

	BuildReplyMenus()

	ctx = context.Background()

	var err error
	client, err = firestore.NewClient(ctx, appConfig.ProjectID)
	if err != nil {
		log.Fatal("Can't run firestore client", err)
		return
	}
}

func main() {
	b, err := tele.NewBot(tele.Settings{
		Token:  appConfig.TelegramToken,
		Poller: &tele.LongPoller{Timeout: 10 * 1e9},
	})
	if err != nil {
		log.Fatal("Can't run telegram bot", err)
		return
	}

	b.Handle("/start", func(tlg tele.Context) error {
		return tlg.Send("–î–ª—è —Ä–∞–±–æ—Ç—ã –º–Ω–µ –Ω—É–∂–µ–Ω —Ç–≤–æ–π —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä.", startMenu)
	})

	b.Handle(tele.OnContact, func(tlg tele.Context) error {
		if tlg.Message().Contact.UserID != int(tlg.Sender().ID) {
			return tlg.Send("üò° –ú–µ–Ω—è –Ω–µ –æ–±–º–∞–Ω–µ—à—å, –º–æ–∂–Ω–æ –ø—Ä–∏—Å–ª–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç", startMenu)
		}

		user := User{Id: tlg.Sender().ID, Phone: tlg.Message().Contact.PhoneNumber}

		if err := user.SaveUser(); err != nil {
			return tlg.Send("–ù–µ –º–æ–≥—É —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é üòî", startMenu)
		}

		company, err := user.FindCompany()
		if err != nil {
			return tlg.Send("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π üòî", startMenu)
		}

		if company != nil {
			company.SetInfo()
			return tlg.Send("üëã –ü—Ä–∏–≤–µ—Ç!\n–¢–µ–ø–µ—Ä—å —É —Ç–µ–±—è –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–æ–º–ø–∞–Ω–∏–∏ "+company.Info.Name, emplMenu)
		}

		return tlg.Send("–°–æ—Ö—Ä–∞–Ω–∏–ª, –Ω–æ –Ω–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –Ω–∏ –æ–¥–Ω—É –ø–æ–¥—Ö–æ–¥—è—â—É—é –∫–æ–º–ø–∞–Ω–∏—é.\n–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω –ø–æ–¥–∫–ª—é—á–∏—Ç—å –∫–æ–º–ø–∞–Ω–∏—é –∫ –±–æ—Ç—É –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ–±—è –≤ —Å–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.", unAuthMenu)
	})

	b.Handle("–Ø –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", func(tlg tele.Context) error {
		return tlg.Send("–û—Ç–ø—Ä–∞–≤—å –∫–æ–º–∞–Ω–¥—É\n`/auth login password`\n –≥–¥–µ `login` –∏ `password` ‚Äî —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–æ—Å—Ç—É–ø–∞ –∫ –ª–∏—á–Ω–æ–º—É –∫–∞–±–∏–Ω–µ—Ç—É –î–µ–ª–∏–º–æ–±–∏–ª—å", tele.ModeMarkdownV2)
	})

	// User-related handlers
	userBot := b.Group()
	userBot.Use(provideUserToContext)

	userBot.Handle("/auth", func(tlg tele.Context) error {
		removed := "\n–î–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —è —É–¥–∞–ª–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ª–æ–≥–∏–Ω–æ–º –∏ –ø–∞—Ä–æ–ª–µ–º."
		if len(tlg.Args()) != 2 {
			tlg.Delete()
			return tlg.Send("–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫.\n–ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n /auth login password" + removed)
		}

		userLogger := log.WithField("userId", tlg.Sender().ID)
		userLogger.Trace("Updating user token...")

		company := NewCompany(tlg.Args()[0], tlg.Args()[1])
		if err := company.Authenticate(); err != nil {
			userLogger.Warn(err)
			return tlg.Send(err.Error())
		}
		userLogger.Info("Token updated.")

		if err := company.SaveCompany(); err != nil {
			tlg.Delete()
			return tlg.Send(err.Error() + removed)
		}

		user, ok := tlg.Get("user").(*User)
		if !ok {
			err := errors.New("–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ")
			userLogger.Warn(err)
			return tlg.Send(err.Error() + removed)
		}
		user.CompanyId = company.Id
		user.Admin = true
		if err := user.SaveUser(); err != nil {
			tlg.Delete()
			return tlg.Send("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞, –Ω–æ —Å –æ—à–∏–±–∫–æ–π:\n"+err.Error()+removed, startMenu)
		}

		if err := company.SetInfo(); err != nil {
			tlg.Delete()
			return tlg.Send("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞, –Ω–æ —Å –æ—à–∏–±–∫–æ–π:\n"+err.Error()+removed, startMenu)
		}

		tlg.Delete()
		return tlg.Send("–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –¥–æ—Å—Ç—É–ø –∫ –∫–æ–º–ø–∞–Ω–∏–∏ "+company.Info.Name+"!\n–í—Å—ë –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ, –º–æ–∂–µ–º —Ä–∞–±–æ—Ç–∞—Ç—å."+removed, adminMenu)
	})

	userBot.Handle("–†–∞–∑–ª–æ–≥–∏–Ω–∏—Ç—å—Å—è", SignOut())
	userBot.Handle("/stop", SignOut())

	// Company-related handlers
	companyBot := b.Group()
	companyBot.Use(provideUserToContext)
	companyBot.Use(checkIsActive)
	companyBot.Use(provideCompanyToContext)

	companyBot.Handle("–ë–∞–ª–∞–Ω—Å", func(tlg tele.Context) error {
		menu, ok := tlg.Get("menu").(*tele.ReplyMarkup)
		if !ok {
			menu = emplMenu
		}

		company, ok := tlg.Get("company").(*Company)
		if !ok {
			err := errors.New("–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–ø–∞–Ω–∏–∏")
			log.Warn(err)
			return tlg.Send(err.Error(), menu)
		}
		if err := company.SetInfo(); err != nil {
			return tlg.Send(err.Error(), menu)
		}

		balanceLimit := float64(1000)
		mes := company.Info.Name + "\n" +
			"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: " + strconv.FormatFloat(company.Info.Balance, 'f', 2, 64) + " ‚ÇΩ"

		if company.IsBalanceOK(balanceLimit) {
			return tlg.Send(mes, menu)
		}
		mes += "\n\nüö® –ë–∞–ª–∞–Ω—Å –º–µ–Ω—å—à–µ " + strconv.FormatFloat(balanceLimit, 'f', 2, 64) + " ‚ÇΩ!\n–ù–∞–¥–æ –ø–æ–ø–æ–ª–Ω—è—Ç—å."
		tlg.Send(mes, menu)

		return SendInvoiceMenu(&tlg)
	})

	companyBot.Handle("–ü–æ–µ–∑–¥–∫–∏", func(tlg tele.Context) error {
		menu, ok := tlg.Get("menu").(*tele.ReplyMarkup)
		if !ok {
			menu = emplMenu
		}

		company, ok := tlg.Get("company").(*Company)
		if !ok {
			err := errors.New("–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–ø–∞–Ω–∏–∏")
			log.Warn(err)
			return tlg.Send(err.Error(), menu)
		}
		if err := company.SetInfo(); err != nil {
			return tlg.Send(err.Error(), menu)
		}
		if err := company.SetRides(10, 1); err != nil {
			return tlg.Send(err.Error(), menu)
		}
		mes := "–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–µ–∑–¥–∫–∏:\n" + company.Rides.String()
		return tlg.Send(mes, menu)
	})

	// Admin-only handlers
	adminBot := b.Group()
	adminBot.Use(provideUserToContext)
	adminBot.Use(ensureIsAdmin)
	adminBot.Use(provideCompanyToContext)

	adminBot.Handle("–ü–æ—Å–ª–µ–¥–Ω–∏–π —Å—á—ë—Ç", func(tlg tele.Context) error {
		return Invoice(&tlg)
	})

	adminBot.Handle("–ù–æ–≤—ã–π —Å—á—ë—Ç", func(tlg tele.Context) error {
		return SendInvoiceMenu(&tlg)
	})

	adminBot.Handle(&btnNewInvoice3000, func(tlg tele.Context) error {
		Invoice(&tlg, 3000)
		return tlg.Respond()
	})

	adminBot.Handle(&btnNewInvoice10000, func(tlg tele.Context) error {
		Invoice(&tlg, 10000)
		return tlg.Respond()
	})

	adminBot.Handle(&btnNewInvoice30000, func(tlg tele.Context) error {
		Invoice(&tlg, 30000)
		return tlg.Respond()
	})

	adminBot.Handle(&btnLastInvoice, func(tlg tele.Context) error {
		Invoice(&tlg)
		return tlg.Respond()
	})

	b.Start()
}

func SendInvoiceMenu(tlg *tele.Context) error {
	return (*tlg).Send("–ö–∞–∫–æ–π –Ω—É–∂–µ–Ω —Å—á—ë—Ç?", invoiceMenu)
}

func BuildReplyMenus() {
	startMenu = &tele.ReplyMarkup{ResizeKeyboard: true}
	unAuthMenu = &tele.ReplyMarkup{ResizeKeyboard: true}
	emplMenu = &tele.ReplyMarkup{ResizeKeyboard: true}
	adminMenu = &tele.ReplyMarkup{ResizeKeyboard: true}

	startMenu.Reply(
		startMenu.Row(startMenu.Contact("–î–∞—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")),
	)

	unAuthMenu.Reply(
		unAuthMenu.Row(unAuthMenu.Text("–Ø –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")),
		unAuthMenu.Row(unAuthMenu.Text("–†–∞–∑–ª–æ–≥–∏–Ω–∏—Ç—å—Å—è")),
	)

	emplMenu.Reply(
		emplMenu.Row(emplMenu.Text("–ë–∞–ª–∞–Ω—Å"), emplMenu.Text("–ü–æ–µ–∑–¥–∫–∏")),
		emplMenu.Row(emplMenu.Text("–†–∞–∑–ª–æ–≥–∏–Ω–∏—Ç—å—Å—è")),
	)

	adminMenu.Reply(
		adminMenu.Row(adminMenu.Text("–ë–∞–ª–∞–Ω—Å"), adminMenu.Text("–ü–æ–µ–∑–¥–∫–∏")),
		adminMenu.Row(adminMenu.Text("–ü–æ—Å–ª–µ–¥–Ω–∏–π —Å—á—ë—Ç"), adminMenu.Text("–ù–æ–≤—ã–π —Å—á—ë—Ç")),
		adminMenu.Row(adminMenu.Text("–†–∞–∑–ª–æ–≥–∏–Ω–∏—Ç—å—Å—è")),
	)

	invoiceMenu = &tele.ReplyMarkup{}
	btnNewInvoice3000 = invoiceMenu.Data("–ù–∞ 3 000 ‚ÇΩ", "btnNewInvoice3000")
	btnNewInvoice10000 = invoiceMenu.Data("–ù–∞ 10 000 ‚ÇΩ", "btnNewInvoice10000")
	btnNewInvoice30000 = invoiceMenu.Data("–ù–∞ 30 000 ‚ÇΩ", "btnNewInvoice30000")
	btnLastInvoice = invoiceMenu.Data("–ü–æ—Å–ª–µ–¥–Ω–∏–π", "btnLastInvoice")
	invoiceMenu.Inline(
		invoiceMenu.Row(btnNewInvoice3000, btnNewInvoice10000),
		invoiceMenu.Row(btnNewInvoice30000, btnLastInvoice),
	)
}
