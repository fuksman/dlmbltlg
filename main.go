package main

import (
	"bytes"
	"cloud.google.com/go/firestore"
	"context"
	"dlmbltlg/pkg/delimobil"
	"encoding/base64"
	"encoding/gob"
	"errors"
	"google.golang.org/api/option"
	tb "gopkg.in/tucnak/telebot.v2"
	"log"
	"strconv"
	"strings"
)

func main() {
	ctx := context.Background()

	client, err := firestore.NewClient(ctx, "dlmbltlg", option.WithCredentialsFile("dlmbltlg-fd1662fc1892.json"))
	if err != nil {
		log.Fatal(err)
		return
	}

	tlgDoc, err := client.Collection("Secrets").Doc("Telegram").Get(ctx)
	if err != nil {
		log.Fatal("can't get telegram key from firestore", err)
		return
	}

	tlgKey, err := tlgDoc.DataAt("key")
	if err != nil {
		log.Fatal("can't get telegram key from firestore", err)
		return
	}

	b, err := tb.NewBot(tb.Settings{
		Token:  tlgKey.(string),
		Poller: &tb.LongPoller{Timeout: 10 * 1e9},
	})
	if err != nil {
		log.Fatal(err)
		return
	}

	selector := &tb.ReplyMarkup{}
	btnNewInvoice3000 := selector.Data("–ù–∞ 3 000 ‚ÇΩ", "btnNewInvoice3000")
	btnNewInvoice10000 := selector.Data("–ù–∞ 10 000 ‚ÇΩ", "btnNewInvoice10000")
	btnNewInvoice30000 := selector.Data("–ù–∞ 30 000 ‚ÇΩ", "btnNewInvoice30000")
	btnLastInvoice := selector.Data("–ü–æ—Å–ª–µ–¥–Ω–∏–π", "btnLastInvoice")
	selector.Inline(
		selector.Row(btnNewInvoice3000, btnNewInvoice10000),
		selector.Row(btnNewInvoice30000, btnLastInvoice),
	)

	b.Handle("/start", func(m *tb.Message) {
		mes := "–ü—Ä–∏–≤–µ—Ç! –í–æ—Ç –º–æ–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n/auth ‚Äî –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è\n/balance ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å\n/rides ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–µ–∑–¥–∫–∏\n/newinvoice ‚Äî –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Å—á—ë—Ç\n/lastinvoice ‚Äî –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å—á—ë—Ç"
		b.Send(m.Sender, mes)
	})

	b.Handle("/auth", func(m *tb.Message) {
		creds := strings.Fields(m.Payload)
		removed := "\n–î–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —è —É–¥–∞–ª–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ª–æ–≥–∏–Ω–æ–º –∏ –ø–∞—Ä–æ–ª–µ–º."
		if len(creds) != 2 {
			b.Delete(m)
			b.Send(m.Sender, "–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫.\n–ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n /auth login password"+removed)
			return
		}
		user, err := SetUserCredentials(client, &ctx, m.Sender.ID, creds[0], creds[1])
		if err != nil {
			log.Print(err)
			b.Delete(m)
			b.Send(m.Sender, err.Error()+removed)
			return
		}
		b.Delete(m)
		b.Send(m.Sender, "–ü—Ä–∏–≤–µ—Ç, "+user.Name()+"!\n–í—Å—ë –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ, –º–æ–∂–µ–º —Ä–∞–±–æ—Ç–∞—Ç—å."+removed)
	})

	b.Handle("/balance", func(m *tb.Message) {
		user, err := UserCredentials(client, &ctx, m.Sender.ID)
		if err != nil {
			log.Print(err)
			b.Send(m.Sender, err.Error())
			return
		}
		if err := user.SetCompanyInfo(); err != nil {
			log.Print(err)
			b.Send(m.Sender, err.Error())
			return
		}
		mes := user.Name() + " (" + user.Org.Name + ")\n" +
			"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: " + strconv.FormatFloat(user.Org.Balance, 'f', 2, 64) + " ‚ÇΩ"
		b.Send(m.Sender, mes)
		NotifyAboutBalance(user, b, m.Sender, selector)
	})

	b.Handle("/rides", func(m *tb.Message) {
		user, err := UserCredentials(client, &ctx, m.Sender.ID)
		if err != nil {
			log.Print(err)
			b.Send(m.Sender, err.Error())
			return
		}
		if err := user.SetCompanyInfo(); err != nil {
			log.Print(err)
			b.Send(m.Sender, err.Error())
			return
		}
		if err := user.SetRidesInfo(10, 1); err != nil {
			log.Print(err)
			b.Send(m.Sender, err.Error())
			return
		}
		mes := "–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–µ–∑–¥–∫–∏:\n" + user.Org.Rides.String()
		b.Send(m.Sender, mes)
		NotifyAboutBalance(user, b, m.Sender, selector)
	})

	b.Handle("/lastinvoice", func(m *tb.Message) {
		user, err := UserCredentials(client, &ctx, m.Sender.ID)
		if err != nil {
			log.Print(err)
			b.Send(m.Sender, err.Error())
			return
		}
		Invoice(user, b, m.Sender)
	})

	b.Handle("/newinvoice", func(m *tb.Message) {
		SendInvoiceMenu(b, m.Sender, selector)
	})

	b.Handle(&btnNewInvoice3000, func(c *tb.Callback) {
		user, err := UserCredentials(client, &ctx, c.Sender.ID)
		if err != nil {
			log.Print(err)
			b.Send(c.Sender, err.Error())
			return
		}
		Invoice(user, b, c.Sender, 3000)
		b.Respond(c)
	})

	b.Handle(&btnNewInvoice10000, func(c *tb.Callback) {
		user, err := UserCredentials(client, &ctx, c.Sender.ID)
		if err != nil {
			log.Print(err)
			b.Send(c.Sender, err.Error())
			return
		}
		Invoice(user, b, c.Sender, 10000)
		b.Respond(c)
	})

	b.Handle(&btnNewInvoice30000, func(c *tb.Callback) {
		user, err := UserCredentials(client, &ctx, c.Sender.ID)
		if err != nil {
			log.Print(err)
			b.Send(c.Sender, err.Error())
			return
		}
		Invoice(user, b, c.Sender, 30000)
		b.Respond(c)
	})

	b.Handle(&btnLastInvoice, func(c *tb.Callback) {
		user, err := UserCredentials(client, &ctx, c.Sender.ID)
		if err != nil {
			log.Print(err)
			b.Send(c.Sender, err.Error())
			return
		}
		Invoice(user, b, c.Sender)
		b.Respond(c)
	})

	b.Start()
}

func NotifyAboutBalance(user *delimobil.User, b *tb.Bot, sender *tb.User, menu *tb.ReplyMarkup) {
	balanceLimit := float64(1000)
	if user.IsBalanceOK(balanceLimit) {
		return
	}

	mes := "üö® –ë–∞–ª–∞–Ω—Å –º–µ–Ω—å—à–µ " + strconv.FormatFloat(balanceLimit, 'f', 2, 64) + " ‚ÇΩ!\n–ù–∞–¥–æ –ø–æ–ø–æ–ª–Ω—è—Ç—å."
	b.Send(sender, mes)
	SendInvoiceMenu(b, sender, menu)
}

func SendInvoiceMenu(b *tb.Bot, sender *tb.User, menu *tb.ReplyMarkup) {
	b.Send(sender, "–ö–∞–∫–æ–π –Ω—É–∂–µ–Ω —Å—á—ë—Ç?", menu)
}

func Invoice(user *delimobil.User, b *tb.Bot, sender *tb.User, amount ...float64) {
	if err := user.Auth(user.Login, user.Password); err != nil {
		log.Print(err)
		b.Send(sender, err.Error())
		return
	}
	var (
		invoice *delimobil.File
		err     error
	)
	if amount != nil {
		invoice, err = user.CreateInvoice(amount[0])
	} else {
		invoice, err = user.LastInvoice()
	}
	if err != nil {
		log.Print(err)
		b.Send(sender, err.Error())
		return
	}
	doc := &tb.Document{File: tb.FromReader(invoice.Data)}
	doc.FileName = invoice.FileName
	doc.MIME = invoice.MIME
	b.Send(sender, doc)
}

func UserCredentials(client *firestore.Client, ctx *context.Context, ID int) (user *delimobil.User, err error) {
	userDocRef := client.Collection("Users").Doc(strconv.Itoa(ID))
	authError := errors.New("ü§î –ö–∞–∂–µ—Ç—Å—è, –º—ã –µ—â—ë –Ω–µ –∑–Ω–∞–∫–æ–º—ã. –û—Ç–ø—Ä–∞–≤—å –∫–æ–º–∞–Ω–¥—É\n/auth login password")

	userDoc, err := userDocRef.Get(*ctx)
	if err != nil {
		log.Print("can't get anything from firestore", err)
		return nil, authError
	}

	userGob, err := userDoc.DataAt("gob")
	if err != nil {
		return nil, authError
	}

	user = new(delimobil.User)
	by, err := base64.StdEncoding.DecodeString(userGob.(string))
	if err != nil {
		return nil, err
	}
	buf := bytes.Buffer{}
	buf.Write(by)
	dec := gob.NewDecoder(&buf)
	err = dec.Decode(&user)
	if err != nil {
		return nil, err
	}

	if user.IsValid() {
		return user, nil
	}

	return SetUserCredentials(client, ctx, ID, user.Login, user.Password)
}

func SetUserCredentials(client *firestore.Client, ctx *context.Context, ID int, login, password string) (user *delimobil.User, err error) {
	user = new(delimobil.User)
	userDocRef := client.Collection("Users").Doc(strconv.Itoa(ID))

	if err := user.Auth(login, password); err != nil {
		return nil, err
	}
	buf := bytes.Buffer{}
	enc := gob.NewEncoder(&buf)
	if err := enc.Encode(user); err != nil {
		return nil, err
	}

	if _, err := userDocRef.Set(*ctx, map[string]interface{}{"gob": base64.StdEncoding.EncodeToString(buf.Bytes())}); err != nil {
		return nil, err
	}

	return user, nil
}
